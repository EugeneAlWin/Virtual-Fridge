generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  login          String           @unique @db.VarChar(30)
  password       String           @db.VarChar(128)
  role           Roles            @default(DEFAULT)
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  isArchived     Boolean          @default(false)
  isBanned       Boolean          @default(false)
  chosenRecipe   ChosenRecipe[]
  favoriteRecipe FavoriteRecipe[]
  product        Product[]
  recipe         Recipe[]
  store          Store?
  userChecklists UserChecklists[]
  userToken      UserToken[]
}

model UserToken {
  deviceId     String
  refreshToken String
  userId       Int
  user         User   @relation(fields: [userId], references: [id])

  @@id([userId, deviceId])
}

model Store {
  id               Int                @id @default(autoincrement())
  title            String?            @db.VarChar(50)
  creatorId        Int                @unique
  user             User               @relation(fields: [creatorId], references: [id])
  storeComposition StoreComposition[]
}

model StoreComposition {
  storeId   Int
  productId Int
  quantity  Int        @db.SmallInt
  unit      Units      @default(ITEMS)
  expires   DateTime?  @db.Timestamp(6)
  price     Decimal    @db.Money
  currency  Currencies @default(BYN)
  product   Product    @relation(fields: [productId], references: [id])
  store     Store      @relation(fields: [storeId], references: [id])

  @@id([storeId, productId])
}

model Product {
  id                   Int                    @id @default(autoincrement())
  title                String                 @unique @db.VarChar(50)
  calories             Int                    @db.SmallInt
  protein              Int                    @db.SmallInt
  fats                 Int                    @db.SmallInt
  carbohydrates        Int                    @db.SmallInt
  creatorId            Int
  isApproved           Boolean                @default(false)
  checklistComposition ChecklistComposition[]
  user                 User                   @relation(fields: [creatorId], references: [id])
  recipeComposition    RecipeComposition[]
  storeComposition     StoreComposition[]
}

model Recipe {
  id                Int                 @id @default(autoincrement())
  title             String              @db.VarChar(100)
  type              RecipeTypes
  description       String?
  isVisible         Boolean             @default(false)
  isApproved        Boolean             @default(false)
  createdAt         DateTime            @default(now())
  creatorId         Int
  favoriteRecipe    FavoriteRecipe[]
  user              User                @relation(fields: [creatorId], references: [id])
  recipeComposition RecipeComposition[]
  chosenRecipe      ChosenRecipe[]
}

model RecipeComposition {
  recipeId  Int
  productId Int
  quantity  Int     @db.SmallInt
  product   Product @relation(fields: [productId], references: [id])
  recipe    Recipe  @relation(fields: [recipeId], references: [id])

  @@id([productId, recipeId])
}

model ChosenRecipe {
  id        Int      @id @default(autoincrement())
  userId    Int
  recipeId  Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  isCooked  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
}

model FavoriteRecipe {
  id       Int    @id @default(autoincrement())
  userId   Int
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
}

model Checklist {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now()) @db.Timestamp(6)
  isConfirmed          Boolean                @default(false)
  creatorId            Int
  checklistComposition ChecklistComposition[]
  checklistPrices      ChecklistPrices?
  userChecklists       UserChecklists?
}

model ChecklistComposition {
  checklistId Int
  productId   Int
  quantity    Int        @db.SmallInt
  units       Units      @default(PIECES)
  currency    Currencies @default(BYN)
  price       Decimal?   @default(0) @db.Money
  checklist   Checklist  @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  product     Product    @relation(fields: [productId], references: [id])

  @@id([checklistId, productId])
}

model UserChecklists {
  creatorId   Int
  checklistId Int       @unique
  checklist   Checklist @relation(fields: [checklistId], references: [id])
  user        User      @relation(fields: [creatorId], references: [id])

  @@id([creatorId, checklistId])
}

model ChecklistPrices {
  checklistId Int       @unique
  USD         Decimal   @default(0) @db.Money
  BYN         Decimal   @default(0) @db.Money
  RUB         Decimal   @default(0) @db.Money
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
}

enum RecipeTypes {
  VEGETARIAN
  PASTRIES
  GARNISHES
  HOTDISHES
  HOTAPPETIZERS
  DESSERTS
  HOMEMADE
  BREAKFASTS
  PRESERVES
  CHARCOAL
  BEVERAGES
  SALADS
  SAUCESPASTASDRESSINGS
  SOUPSBROTHS
  DOUGHS
  BREAD
  COLDAPPETIZERS
  SHASHLIKS
}

enum Units {
  GRAMS
  KILOGRAMS
  ITEMS
  PIECES
}

enum Currencies {
  USD
  BYN
  RUB
}

enum Roles {
  ADMIN
  DEFAULT
}
