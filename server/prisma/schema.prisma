generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
model User {
  id             Int              @id @default(autoincrement())
  login          String           @unique @db.VarChar(30)
  password       String           @db.VarChar(120)
  role           Roles            @default(DEFAULT)
  isArchived     Boolean          @default(false)
  isBanned       Boolean          @default(false)
  createdAt      DateTime         @default(now()) @db.Timestamp()
  Store          Store?
  Recipe         Recipe[]
  Product        Product[]
  UserToken      UserToken[]
  ChosenRecipe   ChosenRecipe[]
  FavoriteRecipe FavoriteRecipe[]
  UserChecklists UserChecklists[]
}

model UserToken {
  id           Int    @unique @default(autoincrement())
  userId       Int    @db.Integer
  deviceId     String @db.Text
  refreshToken String @db.Text
  User         User   @relation(fields: [userId], references: [id])
}

//
model Store {
  id               Int                @id @default(autoincrement())
  creatorId        Int                @unique @db.Integer
  title            String?            @db.VarChar(50)
  User             User               @relation(fields: [creatorId], references: [id])
  StoreComposition StoreComposition[]
}

model StoreComposition {
  id        Int        @id @default(autoincrement())
  storeId   Int        @db.Integer
  productId Int        @db.Integer
  quantity  Int        @db.SmallInt
  unit      Units      @default(ITEMS)
  expires   DateTime?  @db.Timestamp()
  price     Decimal    @db.Money
  currency  Currencies @default(BYN)
  Store     Store      @relation(fields: [storeId], references: [id])
  Product   Product    @relation(fields: [productId], references: [id])
}

//
model Product {
  id                   Int                    @id @default(autoincrement())
  creatorId            Int                    @db.Integer
  title                String                 @unique @db.VarChar(50)
  calories             Int                    @db.SmallInt
  protein              Int                    @db.SmallInt
  fats                 Int                    @db.SmallInt
  carbohydrates        Int                    @db.SmallInt
  User                 User                   @relation(fields: [creatorId], references: [id])
  StoreComposition     StoreComposition[]
  RecipeComposition    RecipeComposition[]
  ChecklistComposition ChecklistComposition[]
}

//
model Recipe {
  id                Int                 @id @default(autoincrement())
  creatorId         Int                 @db.Integer
  title             String              @db.VarChar(100)
  type              RecipeTypes
  description       String?             @db.Text
  isVisible         Boolean             @default(false) @db.Boolean
  isApproved        Boolean             @default(false) @db.Boolean
  createdAt         DateTime            @default(now()) @db.Timestamp()
  User              User                @relation(fields: [creatorId], references: [id])
  FavoriteRecipe    FavoriteRecipe[]
  RecipeComposition RecipeComposition[]
}

//
model RecipeComposition {
  id        Int     @id @default(autoincrement())
  recipeId  Int     @db.Integer
  productId Int     @db.Integer
  quantity  Int     @db.SmallInt
  Recipe    Recipe  @relation(fields: [recipeId], references: [id])
  Product   Product @relation(fields: [productId], references: [id])
}

model ChosenRecipe {
  id        Int      @id @default(autoincrement())
  userId    Int      @db.Integer
  recipeId  Int      @db.Integer
  isCooked  Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp()
  User      User     @relation(fields: [userId], references: [id])
}

model FavoriteRecipe {
  id       Int    @id @default(autoincrement())
  userId   Int    @db.Integer
  recipeId Int    @db.Integer
  User     User   @relation(fields: [userId], references: [id])
  Recipe   Recipe @relation(fields: [recipeId], references: [id])
}

//
model Checklist {
  id                   Int                    @id @default(autoincrement())
  creatorId            Int                    @db.Integer
  isConfirmed          Boolean                @default(false) @db.Boolean
  createdAt            DateTime               @default(now()) @db.Timestamp()
  ChecklistPrices      ChecklistPrices?
  UserChecklists       UserChecklists[]
  ChecklistComposition ChecklistComposition[]
}

model ChecklistComposition {
  id          Int        @id @default(autoincrement())
  checklistId Int        @db.Integer
  productId   Int        @db.Integer
  quantity    Int        @db.SmallInt
  units       Units      @default(PIECES)
  price       Decimal?   @default(0) @db.Money
  currency    Currencies @default(BYN)
  Product     Product    @relation(fields: [productId], references: [id])
  Checklist   Checklist  @relation(fields: [checklistId], references: [id])
}

model UserChecklists {
  creatorId   Int       @db.Integer
  checklistId Int       @unique @db.Integer
  User        User      @relation(fields: [creatorId], references: [id])
  Checklist   Checklist @relation(fields: [checklistId], references: [id])
}

// REF: Currencies
model ChecklistPrices {
  checklistId Int       @unique @db.Integer
  USD         Decimal   @default(0) @db.Money
  BYN         Decimal   @default(0) @db.Money
  RUB         Decimal   @default(0) @db.Money
  Checklist   Checklist @relation(fields: [checklistId], references: [id])
}

//
enum RecipeTypes {
  VEGETARIAN
  PASTRIES
  GARNISHES
  HOTDISHES
  HOTAPPETIZERS
  DESSERTS
  HOMEMADE
  BREAKFASTS
  PRESERVES
  CHARCOAL
  BEVERAGES
  SALADS
  SAUCESPASTASDRESSINGS
  SOUPSBROTHS
  DOUGHS
  BREAD
  COLDAPPETIZERS
  SHASHLIKS
}

enum Units {
  GRAMS
  KILOGRAMS
  ITEMS
  PIECES
}

enum Currencies {
  USD
  BYN
  RUB
}

enum Roles {
  ADMIN
  DEFAULT
}
