generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                     @id @default(cuid())
  login              String                     @unique @db.VarChar(30)
  password           String                     @db.VarChar()
  role               Roles                      @default(DEFAULT)
  createdAt          DateTime                   @default(now()) @db.Timestamp(6)
  isFrozen           Boolean?                   @default(false)
  isBlocked          Boolean?                   @default(false)
  UserToken          UserToken[]
  Storage            Storage?
  Product            Product[]
  Recipe             Recipe[]
  ChosenRecipe       SelectedRecipeForCooking[]
  FavoriteRecipe     FavoriteRecipe[]
  RecipePullRequest  RecipePullRequest[]
  ProductPullRequest ProductPullRequest[]
  Checklist          Checklist[]
  UserGrade          UserGrade[]

  @@index([login])
}

model UserToken {
  userId       String
  deviceId     String
  refreshToken String
  lastLoginAt  DateTime? @updatedAt @db.Timestamp(6)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, deviceId])
  @@index([lastLoginAt])
}

model Storage {
  id                 String               @id @default(cuid())
  creatorId          String               @unique
  title              String?              @db.VarChar(30)
  user               User                 @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  StorageComposition StorageComposition[]

  @@index([creatorId], type: Hash)
}

model StorageComposition {
  purchaseDate    DateTime? @db.Timestamp(6)
  expireDate      DateTime  @default("1970-01-01T00:00:00.00Z") @db.Timestamp(6)
  storageId       String
  productId       String
  productQuantity Int       @db.SmallInt
  storage         Storage   @relation(fields: [storageId], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([expireDate, storageId, productId])
  @@index([storageId], type: Hash)
}

model Checklist {
  id                   String                 @id @default(cuid())
  creatorId            String
  createdAt            DateTime               @default(now()) @db.Timestamp(6)
  isConfirmed          Boolean                @default(false)
  lastUpdatedAt        DateTime               @default(now()) @updatedAt
  ChecklistComposition ChecklistComposition[]
  user                 User                   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId], type: Hash)
}

model ChecklistComposition {
  checklistId     String
  productId       String
  productQuantity Int        @db.SmallInt
  price           Decimal    @default(0) @db.Money
  currency        Currencies @default(BYN)
  checklist       Checklist  @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  product         Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([checklistId, productId])
}

model Product {
  id                     String                 @id @default(cuid())
  creatorId              String?
  title                  String                 @unique @db.VarChar(50)
  calories               Int                    @db.SmallInt
  protein                Int                    @db.SmallInt
  fats                   Int                    @db.SmallInt
  carbohydrates          Int                    @db.SmallInt
  unit                   Units                  @default(GRAMS)
  isOfficial             Boolean                @default(false)
  isFrozen               Boolean                @default(false)
  isRecipePossible       Boolean                @default(false)
  averageShelfLifeInDays Int?
  user                   User?                  @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  StorageComposition     StorageComposition[]
  ChecklistComposition   ChecklistComposition[]
  RecipeComposition      RecipeComposition[]
  ProductPullRequest     ProductPullRequest[]
  Recipe                 Recipe[]

  @@index([title])
}

model Recipe {
  id                String                     @id @default(cuid())
  creatorId         String?
  title             String                     @unique @db.VarChar(100)
  type              RecipeTypes
  description       String?                    @db.VarChar(10000)
  createdAt         DateTime                   @default(now())
  isPrivate         Boolean                    @default(true)
  isOfficial        Boolean                    @default(false)
  isFrozen          Boolean                    @default(false)
  productRef        String?
  user              User?                      @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  Product           Product?                   @relation(fields: [productRef], references: [id], onDelete: SetNull)
  RecipeComposition RecipeComposition[]
  ChosenRecipe      SelectedRecipeForCooking[]
  FavoriteRecipe    FavoriteRecipe[]
  RecipePullRequest RecipePullRequest[]
  RecipeRating      RecipeRating[]
  UserGrade         UserGrade[]

  @@index([isOfficial, type, title])
}

model RecipeComposition {
  recipeId  String
  productId String
  quantity  Int     @db.SmallInt
  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, recipeId])
}

model RecipeRating {
  recipeId String @id @default(cuid())
  rating   Float  @default(0)
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([rating])
}

model UserGrade {
  recipeId String
  userId   String
  grade    Int
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([recipeId, userId])
}

model FavoriteRecipe {
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([recipeId, userId])
}

model SelectedRecipeForCooking {
  userId        String
  recipeId      String
  selectedAt    DateTime @default(now()) @db.Timestamp(6)
  isCooked      Boolean  @default(false)
  lastUpdatedAt DateTime @default(now()) @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe        Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([userId, recipeId])
}

model RecipePullRequest {
  creatorId String
  recipeId  String  @unique
  status    Status  @default(PENDING)
  comment   String? @db.Text
  user      User    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  product   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([creatorId], type: Hash)
}

model ProductPullRequest {
  creatorId String
  productId String  @unique
  status    Status  @default(PENDING)
  comment   String? @db.Text
  user      User    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([creatorId], type: Hash)
}

enum Roles {
  ADMIN
  DEFAULT
  GOD
}

enum Currencies {
  USD
  BYN
  RUB
}

enum RecipeTypes {
  VEGETARIAN_DISHES
  BAKING
  GARNISHES
  HOT_DISHES
  HOT_APPETIZERS
  DESSERTS
  HOME_MADE_FASTFOOD
  BREAKFAST
  PRESERVES
  CHARCOAL
  BEVERAGES
  SALADS
  SAUCES_PASTAS_AND_DRESSINGS
  SOUPS_AND_BROTHS
  DOUGH
  BREAD
  COLD_APPETIZERS
  SHISHKEBABS
  OTHER
}

enum Units {
  PORTION
  ITEMS
  GRAMS
  KILOGRAMS
  PIECES
  TABLESPOON
  TEASPOON
  LITER
  MILLILITER
  PINCH
}

enum Status {
  PENDING
  REJECTED
  ACCEPTED
}
